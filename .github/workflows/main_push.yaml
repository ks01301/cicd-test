name: Node.js CI/CD

on:
  push:
    branches: [main, dev]

env:
  DEFAULT_NODE_VERSION: "20.x"

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      NODE_VERSION: ${{ steps.export_env.outputs.NODE_VERSION }} # outputs로 전달
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - run: pwd

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: check Node.js verison test
        run: cat .nvmrc

      - name: set Node.js version
        run: NODE_VERSION=$(cat .nvmrc) >> $NODE_VERSION

      - name: print NODE_VERSION
        run: $NODE_VERSION

      - name: env set
        id: export_env
        run: |
          if [ -f .nvmrc ]; then
            NODE_VERSION=$(cat .nvmrc)
          else
            NODE_VERSION=${{ env.DEFAULT_NODE_VERSION }}
          fi
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_OUTPUT

      - run: echo "${{env.NODE_VERSION}}"

      - name: install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: "pnpm"

      - name: pnpm ci
        run: pnpm install --frozen-lockfile
      - name: pnpm test
        run: pnpm test

  build:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - run: echo "${{needs.test.outputs.NODE_VERSION}}"

      - name: check version
        run: echo "${{needs.test.outputs}}"

      - name: install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{needs.test.outputs.NODE_VERSION}}
          cache: "pnpm"
      - name: pnpm ci
        run: pnpm install --frozen-lockfile
      - name: pnpm build
        run: pnpm build
